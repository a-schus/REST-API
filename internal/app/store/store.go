package store

import (
	"database/sql"
	"fmt"

	"github.com/lib/pq"
)

var databaseURL = "user=postgres password=1234 host=localhost dbname=restapi_dev sslmode=disable"
var defaultDatabaseURL = "user=postgres password=1234 host=localhost dbname=postgres sslmode=disable"

type DBConf struct {
	user string
	pass string
	host string
	name string
}

var conf DBConf

type Store struct {
	DB *sql.DB
}

func init() {
	conf = DBConf{
		user: "schus",
		pass: "19schus78",
		host: "localhost",
		name: "restapi_dev",
	}
}

func (s *Store) Open() error {
	db, _ := sql.Open("postgres", "user="+conf.user+" password="+conf.pass+" host="+conf.host+" dbname="+conf.name+" sslmode=disable")

	err := db.Ping()
	if err != nil {
		fmt.Printf("DB open error: %v\n", err)
		if fmt.Sprintf("%s", err) == "pq: database \"restapi_dev\" does not exist" {
			fmt.Println("Create empty database 'restapi_dev' and try again")
		}
		return err
	}
	fmt.Println("DB open: OK!")

	s.DB = db

	if err = s.initEmptyDB(); err != nil {
		return err
	}

	fmt.Println("DB is correct.")

	return nil
}

func (s *Store) Close() error {
	return s.DB.Close()
}

func (s *Store) initEmptyDB() error {
	_, err := s.DB.Exec("CREATE TABLE IF NOT EXISTS Commands (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(30) NOT NULL UNIQUE, description text, command text[]);")
	if err != nil {
		fmt.Printf("CREATE TABLE 'Commands' error: %v\n", err)
		return err
	}

	_, err = s.DB.Exec("CREATE SEQUENCE IF NOT EXISTS long_comm_id start 1")
	if err != nil {
		fmt.Printf("CREATE SEQUENCE error: %v\n", err)
		return err
	}

	_, err = s.DB.Exec("CREATE TABLE IF NOT EXISTS Log (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, comm_id integer NOT NULL, message text);")
	if err != nil {
		fmt.Printf("CREATE TABLE 'Log' error: %v\n", err)
		return err
	}

	return nil
}
func (s *Store) GetAllCommands() (commandsList []string, e error) {
	var res []string
	rows, err := s.DB.Query("SELECT name, description FROM Commands")
	if err != nil {
		return res, err
	}
	defer rows.Close()

	var id int = 1
	for rows.Next() {
		var name string
		var desc string

		rows.Scan(&name, &desc)

		res = append(res, fmt.Sprintf("%d\t", id)+name+"\t"+desc+"\n\n")
		id++
	}
	return res, nil
}

func (s *Store) GetCommand(name string) (description string, commands pq.StringArray, e error) {
	var desc string
	var cmd pq.StringArray

	row := s.DB.QueryRow("SELECT description, command FROM Commands WHERE name = $1", name)
	err := row.Scan(&desc, &cmd)

	if err != nil {
		return "", pq.StringArray{}, err
	}

	// var sComm string
	// for _, com := range comm {
	// 	sComm += com.String + "; "
	// }

	// desc += "\t" + sComm + "\n\n"

	return desc, cmd, nil
}

func (s *Store) NewCommand(name string, desc string, cmds pq.StringArray) error {
	// cmds := pq.StringArray{cmd}
	// cmds = append(cmds, cmd, "djdgwnfof893idjkf")
	_, err := s.DB.Exec("INSERT INTO Commands (name, description, command) VALUES ($1, $2, $3)", name, desc, cmds)
	return err
}
