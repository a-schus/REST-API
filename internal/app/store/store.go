package store

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

var databaseURL = "user=postgres password=1234 host=localhost dbname=restapi_dev sslmode=disable"
var defaultDatabaseURL = "user=postgres password=1234 host=localhost dbname=postgres sslmode=disable"

type DBConf struct {
	user string
	pass string
	host string
	name string
}

var conf DBConf

type Store struct {
	DB *sql.DB
}

func init() {
	conf = DBConf{
		user: "schus",
		pass: "1234",
		host: "localhost",
		name: "restapi_dev",
	}
}

func (s *Store) Open() error {
	db, _ := sql.Open("postgres", "user="+conf.user+" password="+conf.pass+" host="+conf.host+" dbname="+conf.name+" sslmode=disable")

	err := db.Ping()
	if err != nil {
		fmt.Printf("DB open error: %v\n", err)
		if fmt.Sprintf("%s", err) == "pq: database \"restapi_dev\" does not exist" {
			fmt.Println("Create empty database 'restapi_dev' and try again")
			return err
		}
	}
	fmt.Println("DB open: OK!")

	s.DB = db

	if err = s.initEmptyDB(); err != nil {
		return err
	}

	fmt.Println("DB is correct.")

	return nil
}

func (s *Store) Close() error {
	return s.DB.Close()
}

func (s *Store) initEmptyDB() error {
	_, err := s.DB.Exec("CREATE TABLE IF NOT EXISTS Commands (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, name varchar(30) NOT NULL, command text[]);")
	if err != nil {
		fmt.Printf("CREATE TABLE 'Commands' error: %v\n", err)
		return err
	}

	_, err = s.DB.Exec("CREATE SEQUENCE IF NOT EXISTS long_comm_id start 1")
	if err != nil {
		fmt.Printf("CREATE SEQUENCE error: %v\n", err)
		return err
	}

	_, err = s.DB.Exec("CREATE TABLE IF NOT EXISTS Log (id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, comm_id integer NOT NULL, message text);")
	if err != nil {
		fmt.Printf("CREATE TABLE 'Log' error: %v\n", err)
		return err
	}

	return nil
}
